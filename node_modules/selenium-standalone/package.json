{
  "name": "selenium-standalone",
  "version": "2.39.0-2.9.0",
  "description": "installs a `start-selenium` command line to start a standalone selenium server with chrome-driver",
  "dependencies": {
    "request": "~2.27.0",
    "unzip": "~0.1.9",
    "async": "~0.2.9",
    "mkdirp": "~0.3.5",
    "rimraf": "~2.2.2"
  },
  "main": "index.js",
  "scripts": {
    "install": "node install.js",
    "test": "mocha test.js -R tap | faucet"
  },
  "bin": {
    "start-selenium": "./bin/start-selenium"
  },
  "license": "MIT",
  "devDependencies": {
    "mocha": "~1.16.2",
    "faucet": "0.0.0"
  },
  "contributors": [
    {
      "name": "Vincent Voyer",
      "email": "vincent@zeroload.net"
    },
    {
      "name": "Josh Chisholm",
      "email": "joshuachisholm@gmail.com"
    }
  ],
  "readme": "# selenium-standalone\n\nIntalls a `start-selenium` command line starting a selenium standalone\nserver along with the chromedriver.\n\nCurrently installs selenium `2.39.0` and chrome driver `2.8`.\n\n```shell\nnpm install --production selenium-standalone -g\nstart-selenium\n```\n\nAny arguments passed to `start-selenium` are then passed to\n`java -jar ...jar args`.\n\nSo you can `start-selenium -debug` to launch standalone selenium server\nin debug mode.\n\n## Running headlessly\n\nOn linux,\n\nTo run headlessly, you can use [xvfb](http://en.wikipedia.org/wiki/Xvfb):\n\n```shell\nxvfb-run --server-args=\"-screen 0, 1366x768x24\" start-selenium\n```\n\n## Available browsers\n\nBy default, google chrome, firefox and phantomjs are available\nif installed on the sytem.\n\n## Example: launch www.google.com\n\nUsing a selenium driver like [wd](https://github.com/admc/wd):\n\n```shell\nnpm install wd -g\nwd shell\n(wd): browser = wd.remote(); browser.init(function(){browser.get('http://www.google.com')})\n```\n\n## Programmatic use\n\n```js\nvar selenium = require('selenium-standalone');\n\nvar spawnOptions = { stdio: 'pipe' };\n\n// options to pass to `java -jar selenium-server-standalone-X.XX.X.jar`\nvar seleniumArgs = [\n  '-debug'\n];\n\nvar server = selenium(spawnOptions, seleniumArgs);\n// or, var server = selenium();\n// returns ChildProcess instance\n// http://nodejs.org/api/child_process.html#child_process_class_childprocess\n\n// spawnOptions defaults to `{ stdio: 'pipe' }`\n// seleniumArgs defaults to `[]`\n\nserver.stdout.on('data', function(output) {\n  console.log(output);\n});\n```\n\n`selenium-standalone` versions maps `selenium` versions.\n",
  "readmeFilename": "README.md",
  "_id": "selenium-standalone@2.39.0-2.9.0",
  "dist": {
    "shasum": "3bc6b5ed3273c176fc39a54732812046575c4c11"
  },
  "_from": "selenium-standalone@",
  "_resolved": "http://registry.npmjs.org/selenium-standalone/-/selenium-standalone-2.39.0-2.9.0.tgz"
}
